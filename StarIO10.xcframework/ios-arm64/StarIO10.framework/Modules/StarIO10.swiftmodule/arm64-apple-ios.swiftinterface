// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StarIO10
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import ExternalAccessory
import Foundation
import Network
@_exported import StarIO10
import StarIO10.StarLogger
import StarIO10.StarXpandCommandParserWrapper
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandBuilder) public class StarXpandCommandBuilder : ObjectiveC.NSObject {
    @objc public func addDocument(_ builder: StarIO10.StarXpandCommand.DocumentBuilder) -> Self
    @objc public func getCommands() -> Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
}
@objc(STARIO10StarPrinterEmulation) public enum StarPrinterEmulation : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case starLine
  case starDot
  case starGraphic
  case starPRNT
  case escPos
  case escPosMobile
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objc(STARIO10StarXpandCommandDisplayCursorState) public enum CursorState : Swift.Int {
    case on
    case blink
    case off
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandDisplayBuilder) public class DisplayBuilder : ObjectiveC.NSObject {
    @objc public func styleInternationalCharacter(_ type: StarIO10.StarXpandCommand.Display.InternationalCharacterType) -> Self
    @objc public func styleCharacterEncoding(_ type: StarIO10.StarXpandCommand.Display.CharacterEncodingType) -> Self
    @objc public func styleCursorPositionTo(_ parameter: StarIO10.StarXpandCommand.Display.PositionParameter) -> Self
    @objc public func actionClearLine() -> Self
    @objc public func actionClearAll() -> Self
    @objc public func actionSetBackLightState(_ on: Swift.Bool) -> Self
    @objc public func actionSetCursorState(_ state: StarIO10.StarXpandCommand.Display.CursorState) -> Self
    @objc public func actionSetContrast(_ value: StarIO10.StarXpandCommand.Display.Contrast) -> Self
    @objc public func actionShowText(_ content: Swift.String) -> Self
    @objc public func actionShowImage(_ parameter: StarIO10.StarXpandCommand.Display.ImageParameter) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterLineStyle) public enum LineStyle : Swift.Int {
    case single
    case double
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10SpoolJobState) public enum SpoolJobState : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case accepted
  case printFailedByTimeoutBeforePrinting
  case printing
  case waitingPaperTaken
  case waitingPrinterReady
  case printSucceeded
  case printFailedByPrinterError
  case printFailedByTimeout
  case printFailedByPowerOff
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand {
  @objcMembers @objc(STARIO10StarXpandCommandMagnificationParameter) public class MagnificationParameter : ObjectiveC.NSObject {
    @objc final public let width: Swift.Int
    @objc final public let height: Swift.Int
    @objc public init(width: Swift.Int, height: Swift.Int)
    @objc deinit
  }
}
@objc(STARIO10DisplayDelegate) public protocol DisplayDelegate {
  @objc func display(printer: StarIO10.StarPrinter, communicationErrorDidOccur error: Swift.Error)
  @objc func displayDidConnect(printer: StarIO10.StarPrinter)
  @objc func displayDidDisconnect(printer: StarIO10.StarPrinter)
}
extension StarIO10.StarXpandCommand.MelodySpeaker {
  @objcMembers @objc(STARIO10StarXpandCommandMelodySpeakerDriveRegisteredSoundParameter) public class DriveRegisteredSoundParameter : ObjectiveC.NSObject {
    @objc final public let area: StarIO10.StarXpandCommand.MelodySpeaker.SoundStorageArea
    @objc final public let number: Swift.Int
    @objc public var volume: Swift.Int {
      @objc get
    }
    @objc public func setVolume(_ volume: Swift.Int) -> Self
    @objc public init(area: StarIO10.StarXpandCommand.MelodySpeaker.SoundStorageArea, number: Swift.Int)
    @objc deinit
  }
}
@objc(STARIO10PrinterDelegate) public protocol PrinterDelegate {
  @objc func printer(_ printer: StarIO10.StarPrinter, communicationErrorDidOccur error: Swift.Error)
  @objc func printerIsReady(_ printer: StarIO10.StarPrinter)
  @objc func printerDidHaveError(_ printer: StarIO10.StarPrinter)
  @objc func printerIsPaperReady(_ printer: StarIO10.StarPrinter)
  @objc func printerIsPaperNearEmpty(_ printer: StarIO10.StarPrinter)
  @objc func printerIsPaperEmpty(_ printer: StarIO10.StarPrinter)
  @objc func printerIsCoverOpen(_ printer: StarIO10.StarPrinter)
  @objc func printerIsCoverClose(_ printer: StarIO10.StarPrinter)
}
extension StarIO10.StarXpandCommand.Printer {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandPrinterBlackMarkParameter) public class BlackMarkParameter : ObjectiveC.NSObject {
    @objc public var enable: Swift.Bool {
      @objc get
    }
    @objc public func setEnable(_ enable: Swift.Bool) -> Self
    @objc public var position: StarIO10.StarXpandCommand.Printer.BlackMarkPosition {
      @objc get
    }
    @objc public func setPosition(_ position: StarIO10.StarXpandCommand.Printer.BlackMarkPosition) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterPDF417Parameter) public class PDF417Parameter : ObjectiveC.NSObject {
    @objc final public let content: Swift.String
    @objc public var column: Swift.Int {
      @objc get
    }
    @objc public func setColumn(_ column: Swift.Int) -> Self
    @objc public var line: Swift.Int {
      @objc get
    }
    @objc public func setLine(_ line: Swift.Int) -> Self
    @objc public var module: Swift.Int {
      @objc get
    }
    @objc public func setModule(_ module: Swift.Int) -> Self
    @objc public var aspect: Swift.Int {
      @objc get
    }
    @objc public func setAspect(_ aspect: Swift.Int) -> Self
    @objc public var level: StarIO10.StarXpandCommand.Printer.PDF417Level {
      @objc get
    }
    @objc public func setLevel(_ level: StarIO10.StarXpandCommand.Printer.PDF417Level) -> Self
    @objc public init(content: Swift.String)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objc(STARIO10StarXpandCommandDisplayContrast) public enum Contrast : Swift.Int {
    case plus3
    case plus2
    case plus1
    case `default`
    case minus1
    case minus2
    case minus3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension CoreBluetooth.CBManagerState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(STARIO10Logger) @objcMembers final public class StarIO10Logger : ObjectiveC.NSObject {
  @objc(sharedObject) public static let shared: StarIO10.StarIO10Logger
  @objc final public func start()
  @objc final public func stop()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(STARIO10StarPrinterStatus) public class StarPrinterStatus : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var hasError: Swift.Bool {
    get
  }
  @objc public var coverOpen: Swift.Bool {
    get
  }
  @objc public var drawerOpenCloseSignal: Swift.Bool {
    get
  }
  @objc public var paperEmpty: Swift.Bool {
    get
  }
  @objc public var paperNearEmpty: Swift.Bool {
    get
  }
  @objc public var reserved: Swift.Dictionary<Swift.String, Any> {
    @objc get
  }
  public var detail: StarIO10.StarPrinterStatusDetail {
    get
  }
  @objc deinit
}
extension StarIO10.StarXpandCommand.Drawer {
  @objc(STARIO10StarXpandCommandDrawerChannel) public enum Channel : Swift.Int {
    case no1
    case no2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10StarDeviceDiscoveryManager) public protocol StarDeviceDiscoveryManager {
  @objc weak var delegate: StarIO10.StarDeviceDiscoveryManagerDelegate? { get set }
  @objc var discoveryTime: Swift.Int { get set }
  @objc(startDiscoveryWithError:) func startDiscovery() throws
  @objc func stopDiscovery()
}
@objc(STARIO10DrawerOpenedMethod) public enum DrawerOpenedMethod : Swift.Int, Swift.CustomStringConvertible {
  @objc(STARIO10DrawerOpenedMethodByHand) case byHand
  @objc(STARIO10DrawerOpenedMethodByCommand) case byCommand
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(STARIO10SpoolJobReceivedInterface) public enum SpoolJobReceivedInterface : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case usbPrinterClass
  case usbAOA
  case usbiAP
  case bluetooth
  case lan
  case cloudPRNT
  case webPRNT
  case smcs
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterQRCodeParameter) public class QRCodeParameter : ObjectiveC.NSObject {
    @objc final public let content: Swift.String
    @objc public var model: StarIO10.StarXpandCommand.Printer.QRCodeModel {
      @objc get
    }
    @objc public func setModel(_ model: StarIO10.StarXpandCommand.Printer.QRCodeModel) -> Self
    @objc public var level: StarIO10.StarXpandCommand.Printer.QRCodeLevel {
      @objc get
    }
    @objc public func setLevel(_ level: StarIO10.StarXpandCommand.Printer.QRCodeLevel) -> Self
    @objc public var cellSize: Swift.Int {
      @objc get
    }
    @objc public func setCellSize(_ cellSize: Swift.Int) -> Self
    @objc public init(content: Swift.String)
    @objc deinit
  }
}
public protocol StarPrinterStatusDetail {
  var cutterError: Swift.Bool? { get }
  var paperSeparatorError: Swift.Bool? { get }
  var paperJamError: Swift.Bool? { get }
  var rollPositionError: Swift.Bool? { get }
  var paperPresent: Swift.Bool? { get }
  var drawerOpenError: Swift.Bool? { get }
  var printUnitOpen: Swift.Bool? { get }
  var drawer1OpenedMethod: StarIO10.DrawerOpenedMethod? { get }
  var drawer1OpenCloseSignal: Swift.Bool? { get }
  var drawer2OpenedMethod: StarIO10.DrawerOpenedMethod? { get }
  var drawer2OpenCloseSignal: Swift.Bool? { get }
  var externalDevice1Connected: Swift.Bool? { get }
  var externalDevice2Connected: Swift.Bool? { get }
  var partsReplacementNotification: Swift.Bool? { get }
  var cleaningNotification: Swift.Bool? { get }
  var detectedPaperWidth: Swift.Int? { get }
}
extension StarIO10.StarXpandCommand.Buzzer {
  @objc(STARIO10StarXpandCommandBuzzerChannel) public enum Channel : Swift.Int {
    case no1
    case no2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterPageModePrintDirection) public enum PageModePrintDirection : Swift.Int {
    case bottomToTop
    case leftToRight
    case rightToLeft
    case topToBottom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandMelodySpeakerBuilder) public class MelodySpeakerBuilder : ObjectiveC.NSObject {
    @objc public func actionDriveRegisteredSound(_ parameter: StarIO10.StarXpandCommand.MelodySpeaker.DriveRegisteredSoundParameter) -> Self
    @objc public func actionDriveOneTimeSound(_ parameter: StarIO10.StarXpandCommand.MelodySpeaker.DriveOneTimeSoundParameter) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
@objc(STARIO10InputDeviceDelegate) public protocol InputDeviceDelegate {
  @objc func inputDevice(printer: StarIO10.StarPrinter, communicationErrorDidOccur error: Swift.Error)
  @objc func inputDeviceDidConnect(printer: StarIO10.StarPrinter)
  @objc func inputDeviceDidDisconnect(printer: StarIO10.StarPrinter)
  @objc func inputDevice(printer: StarIO10.StarPrinter, didReceive data: Foundation.Data)
}
extension StarIO10.StarXpandCommand.Display {
  @objc(STARIO10StarXpandCommandDisplayCharacterEncodingType) public enum CharacterEncodingType : Swift.Int {
    case japanese
    case simplifiedChinese
    case traditionalChinese
    case korean
    case codePage
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objcMembers @objc(STARIO10StarXpandCommandDisplayPositionParameter) public class PositionParameter : ObjectiveC.NSObject {
    @objc final public let x: Swift.Int
    @objc final public let y: Swift.Int
    @objc public init(x: Swift.Int, y: Swift.Int)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterFontType) public enum FontType : Swift.Int {
    case a
    case b
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterPageModeAreaParameter) public class PageModeAreaParameter : ObjectiveC.NSObject {
    @objc final public let width: Swift.Double
    @objc final public let height: Swift.Double
    @objc public var x: Swift.Double {
      @objc get
    }
    @objc public func setX(_ x: Swift.Double) -> Self
    @objc public var y: Swift.Double {
      @objc get
    }
    @objc public func setY(_ y: Swift.Double) -> Self
    @objc public init(width: Swift.Double, height: Swift.Double)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(STARIO10StarPrinterInformation) public class StarPrinterInformation : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var model: StarIO10.StarPrinterModel {
    get
  }
  @objc public var emulation: StarIO10.StarPrinterEmulation {
    get
  }
  @objc public var reserved: Swift.Dictionary<Swift.String, Any> {
    @objc get
  }
  @objc deinit
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterPageModeRectangleParameter) public class PageModeRectangleParameter : ObjectiveC.NSObject {
    @objc final public let x: Swift.Double
    @objc final public let y: Swift.Double
    @objc final public let width: Swift.Double
    @objc final public let height: Swift.Double
    @objc public var thickness: Swift.Double {
      @objc get
    }
    @objc public func setThickness(_ thickness: Swift.Double) -> Self
    @objc public var roundCorner: Swift.Bool {
      @objc get
    }
    @objc public func setRoundCorner(_ roundCorner: Swift.Bool) -> Self
    @objc public var cornerRadius: Swift.Double {
      @objc get
    }
    @objc public func setCornerRadius(_ cornerRadius: Swift.Double) -> Self
    @objc public var lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle {
      @objc get
    }
    @objc public func setLineStyle(_ lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle) -> Self
    @objc public init(x: Swift.Double, y: Swift.Double, width: Swift.Double, height: Swift.Double)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(STARIO10StarDeviceDiscoveryManagerFactory) public class StarDeviceDiscoveryManagerFactory : ObjectiveC.NSObject {
  public static func create(interfaceTypes: [StarIO10.InterfaceType]) throws -> StarIO10.StarDeviceDiscoveryManager
  @available(swift, obsoleted: 0.1)
  @objc(createWithInterfaceTypes:error:) public static func create(interfaceTypes: [Swift.Int]) throws -> StarIO10.StarDeviceDiscoveryManager
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(STARIO10StarSpoolJobStatus) public class StarSpoolJobStatus : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var jobId: Swift.Int {
    get
  }
  @objc public var jobState: StarIO10.SpoolJobState {
    get
  }
  @objc public var elapsedTime: Swift.Int {
    get
  }
  @objc public var jobReceivedInterface: StarIO10.SpoolJobReceivedInterface {
    get
  }
  @objc public var appInfo: Swift.String {
    get
  }
  @objc public var hostModel: Swift.String {
    get
  }
  @objc public var hostOS: Swift.String {
    get
  }
  @objc public var hostIpAddress: Swift.String {
    get
  }
  @objc public var jobSettings: StarIO10.StarSpoolJobSettings {
    get
  }
  @objc deinit
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterAlignment) public enum Alignment : Swift.Int {
    case left
    case center
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(STARIO10StarPrinter) public class StarPrinter : ObjectiveC.NSObject {
  @objc public var information: StarIO10.StarPrinterInformation? {
    get
  }
  @objc public var connectionSettings: StarIO10.StarConnectionSettings {
    get
  }
  @objc public var printerDelegate: StarIO10.PrinterDelegate? {
    @objc get
    @objc set(value)
  }
  @objc public var drawerDelegate: StarIO10.DrawerDelegate? {
    @objc get
    @objc set(value)
  }
  @objc public var inputDeviceDelegate: StarIO10.InputDeviceDelegate? {
    @objc get
    @objc set(value)
  }
  @objc public var displayDelegate: StarIO10.DisplayDelegate? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var openTimeout: Swift.Int
  @objc public var getStatusTimeout: Swift.Int
  @objc public var printTimeout: Swift.Int
  @objc public var starConfigurationTimeout: Swift.Int
  @objc(initWithConnectionSettings:) convenience public init(_ connectionSettings: StarIO10.StarConnectionSettings)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommand) public class StarXpandCommand : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class Printer : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Buzzer : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Drawer : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class MelodySpeaker : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Display : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum StarIO10Error : Swift.Error {
  case unknown(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case argument(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case badResponse(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case communication(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case illegalDeviceState(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case inUse(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case invalidOperation(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case notFound(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case unprintable(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none, status: StarIO10.StarPrinterStatus? = nil)
  case authentication(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case unsupportedModel(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
  case unsupportedOSVersion(message: Swift.String, errorCode: StarIO10.StarIO10ErrorCode = StarIO10ErrorCode.none)
}
extension StarIO10.StarIO10Error : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension StarIO10.StarIO10Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterImageParameter) public class ImageParameter : ObjectiveC.NSObject {
    @objc final public let image: UIKit.UIImage
    @objc final public let width: Swift.Int
    @objc public var effectDiffusion: Swift.Bool {
      @objc get
    }
    @objc public func setEffectDiffusion(_ enable: Swift.Bool) -> Self
    @objc public var threshold: Swift.Int {
      @objc get
    }
    @objc public func setThreshold(_ threshold: Swift.Int) -> Self
    @objc public init(image: UIKit.UIImage, width: Swift.Int)
    @objc deinit
  }
}
@objc(STARIO10DrawerDelegate) public protocol DrawerDelegate {
  @objc func drawer(printer: StarIO10.StarPrinter, communicationErrorDidOccur error: Swift.Error)
  @objc func drawer(printer: StarIO10.StarPrinter, didSwitch openCloseSignal: Swift.Bool)
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterQRCodeLevel) public enum QRCodeLevel : Swift.Int {
    case l
    case m
    case q
    case h
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandPrinterLabelParameter) public class LabelParameter : ObjectiveC.NSObject {
    @objc public func enable() -> Swift.Bool
    @objc public func setEnable(_ enable: Swift.Bool) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objcMembers @objc(STARIO10StarXpandCommandDisplayImageParameter) public class ImageParameter : ObjectiveC.NSObject {
    @objc final public let image: UIKit.UIImage
    @objc public var effectDiffusion: Swift.Bool {
      @objc get
    }
    @objc public func setEffectDiffusion(_ enable: Swift.Bool) -> Self
    @objc public var threshold: Swift.Int {
      @objc get
    }
    @objc public func setThreshold(_ threshold: Swift.Int) -> Self
    @objc public init(image: UIKit.UIImage)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterLogoParameter) public class LogoParameter : ObjectiveC.NSObject {
    @objc final public let keyCode: Swift.String
    @objc public init(keyCode: Swift.String)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterCharacterEncodingType) public enum CharacterEncodingType : Swift.Int {
    case japanese
    case simplifiedChinese
    case traditionalChinese
    case korean
    case codePage
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10StarPrinterModel) public enum StarPrinterModel : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  @objc(STARIO10StarPrinterModelTSP650II) case tsp650II
  @objc(STARIO10StarPrinterModelTSP700II) case tsp700II
  @objc(STARIO10StarPrinterModelTSP800II) case tsp800II
  @objc(STARIO10StarPrinterModelTSP100IIIW) case tsp100IIIW
  @objc(STARIO10StarPrinterModelTSP100IIILAN) case tsp100IIILAN
  @objc(STARIO10StarPrinterModelTSP100IIIBI) case tsp100IIIBI
  @objc(STARIO10StarPrinterModelTSP100IIIU) case tsp100IIIU
  @objc(STARIO10StarPrinterModelTSP100IV_SK) case tsp100IV_SK
  @objc(STARIO10StarPrinterModelTSP100IV) case tsp100IV
  @objc(STARIO10StarPrinterModelmPOP) case mPOP
  @objc(STARIO10StarPrinterModelmC_Print2) case mC_Print2
  @objc(STARIO10StarPrinterModelmC_Print3) case mC_Print3
  @objc(STARIO10StarPrinterModelmC_Label3) case mC_Label3
  @objc(STARIO10StarPrinterModelSM_S210i) case sm_S210i
  @objc(STARIO10StarPrinterModelSM_S230i) case sm_S230i
  @objc(STARIO10StarPrinterModelSM_T300i) case sm_T300i
  @objc(STARIO10StarPrinterModelSM_T400i) case sm_T400i
  @objc(STARIO10StarPrinterModelSM_L200) case sm_L200
  @objc(STARIO10StarPrinterModelSM_L300) case sm_L300
  @objc(STARIO10StarPrinterModelSP700) case sp700
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterPageModeRuledLineParameter) public class PageModeRuledLineParameter : ObjectiveC.NSObject {
    @objc final public let xStart: Swift.Double
    @objc final public let yStart: Swift.Double
    @objc final public let xEnd: Swift.Double
    @objc final public let yEnd: Swift.Double
    @objc public var thickness: Swift.Double {
      @objc get
    }
    @objc public func setThickness(_ thickness: Swift.Double) -> Self
    @objc public var lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle {
      @objc get
    }
    @objc public func setLineStyle(_ lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle) -> Self
    @objc public init(xStart: Swift.Double, yStart: Swift.Double, xEnd: Swift.Double, yEnd: Swift.Double)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.MelodySpeaker {
  @objcMembers @objc(STARIO10StarXpandCommandMelodySpeakerDriveOneTimeSoundParameter) public class DriveOneTimeSoundParameter : ObjectiveC.NSObject {
    @objc final public let source: Foundation.Data
    @objc public var volume: Swift.Int {
      @objc get
    }
    @objc public func setVolume(_ volume: Swift.Int) -> Self
    @objc public init(source: Foundation.Data)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterPageModeImageParameter) public class PageModeImageParameter : ObjectiveC.NSObject {
    @objc final public let image: UIKit.UIImage
    @objc final public let x: Swift.Double
    @objc final public let y: Swift.Double
    @objc final public let width: Swift.Int
    @objc public var effectDiffusion: Swift.Bool {
      @objc get
    }
    @objc public func setEffectDiffusion(_ enable: Swift.Bool) -> Self
    @objc public var threshold: Swift.Int {
      @objc get
    }
    @objc public func setThreshold(_ threshold: Swift.Int) -> Self
    @objc public init(image: UIKit.UIImage, x: Swift.Double, y: Swift.Double, width: Swift.Int)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterBlackMarkPosition) public enum BlackMarkPosition : Swift.Int {
    case front
    case back
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, *)
extension StarIO10.StarPrinter {
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func open() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func close() async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func print(raw: Foundation.Data) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func print(command: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func print(command: Swift.String, starSpoolJobSettings: StarIO10.StarSpoolJobSettings) async throws -> Swift.Int
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func getStatus() async throws -> StarIO10.StarPrinterStatus
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func getSpoolJobStatus(jobId: Swift.Int) async throws -> StarIO10.StarSpoolJobStatus
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func getSpoolJobStatusList(size: Swift.Int) async throws -> [StarIO10.StarSpoolJobStatus]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func setStarConfiguration(starConfiguration: Swift.String) async throws -> StarIO10.StarConfigurationSetResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func getStarConfiguration(password: Swift.String? = nil) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc dynamic public func getDefaultStarConfiguration() async throws -> Swift.String
  #endif
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterPDF417Level) public enum PDF417Level : Swift.Int {
    case ecc0
    case ecc1
    case ecc2
    case ecc3
    case ecc4
    case ecc5
    case ecc6
    case ecc7
    case ecc8
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objc(STARIO10StarXpandCommandDisplayInternationalCharacterType) public enum InternationalCharacterType : Swift.Int {
    case usa
    case france
    case germany
    case uk
    case denmark
    case sweden
    case italy
    case spain
    case japan
    case norway
    case denmark2
    case spain2
    case latinAmerica
    case korea
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Drawer {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandDrawerOpenParameter) public class OpenParameter : ObjectiveC.NSObject {
    @objc public var channel: StarIO10.StarXpandCommand.Drawer.Channel {
      @objc get
    }
    @objc public func setChannel(_ channel: StarIO10.StarXpandCommand.Drawer.Channel) -> Self
    @objc public var onTime: Swift.Int {
      @objc get
    }
    @objc public func setOnTime(_ onTime: Swift.Int) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterBarcodeParameter) public class BarcodeParameter : ObjectiveC.NSObject {
    @objc final public let content: Swift.String
    @objc final public let symbology: StarIO10.StarXpandCommand.Printer.BarcodeSymbology
    @objc public var printHRI: Swift.Bool {
      @objc get
    }
    @objc public func setPrintHRI(_ printHRI: Swift.Bool) -> Self
    @objc public var barDots: Swift.Int {
      @objc get
    }
    @objc public func setBarDots(_ barDots: Swift.Int) -> Self
    @objc public var barRatioLevel: StarIO10.StarXpandCommand.Printer.BarcodeBarRatioLevel {
      @objc get
    }
    @objc public func setBarRatioLevel(_ barRatioLevel: StarIO10.StarXpandCommand.Printer.BarcodeBarRatioLevel) -> Self
    @objc public var height: Swift.Double {
      @objc get
    }
    @objc public func setHeight(_ height: Swift.Double) -> Self
    @objc public init(content: Swift.String, symbology: StarIO10.StarXpandCommand.Printer.BarcodeSymbology)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterQRCodeModel) public enum QRCodeModel : Swift.Int {
    case model1
    case model2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandDrawerBuilder) public class DrawerBuilder : ObjectiveC.NSObject {
    @objc public func actionOpen(_ parameter: StarIO10.StarXpandCommand.Drawer.OpenParameter) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandPageModeBuilder) public class PageModeBuilder : ObjectiveC.NSObject {
    @objc public func stylePrintDirection(_ direction: StarIO10.StarXpandCommand.Printer.PageModePrintDirection) -> Self
    @objc public func styleFont(_ type: StarIO10.StarXpandCommand.Printer.FontType) -> Self
    @objc public func styleBold(_ enable: Swift.Bool) -> Self
    @objc public func styleInvert(_ enable: Swift.Bool) -> Self
    @objc public func styleUnderLine(_ enable: Swift.Bool) -> Self
    @objc public func styleMagnification(_ parameter: StarIO10.StarXpandCommand.MagnificationParameter) -> Self
    @objc public func styleCharacterSpace(_ width: Swift.Double) -> Self
    @objc public func styleLineSpace(_ height: Swift.Double) -> Self
    @objc public func styleVerticalPositionTo(_ position: Swift.Double) -> Self
    @objc public func styleVerticalPositionBy(_ position: Swift.Double) -> Self
    @objc public func styleHorizontalPositionTo(_ position: Swift.Double) -> Self
    @objc public func styleHorizontalPositionBy(_ position: Swift.Double) -> Self
    @objc public func styleHorizontalTabPositions(_ positions: [Swift.Int]) -> Self
    @objc public func styleInternationalCharacter(_ type: StarIO10.StarXpandCommand.Printer.InternationalCharacterType) -> Self
    @objc public func styleSecondPriorityCharacterEncoding(_ type: StarIO10.StarXpandCommand.Printer.CharacterEncodingType) -> Self
    public func styleCJKCharacterPriority(_ types: [StarIO10.StarXpandCommand.Printer.CJKCharacterType]) -> Self
    @available(swift, obsoleted: 0.1)
    @objc(styleCJKCharacterPriority:) public func styleCJKCharacterPriority(_ types: [Swift.Int]) -> Self
    @objc public func actionPrintText(_ content: Swift.String) -> Self
    @objc public func actionPrintBarcode(_ parameter: StarIO10.StarXpandCommand.Printer.BarcodeParameter) -> Self
    @objc public func actionPrintPDF417(_ parameter: StarIO10.StarXpandCommand.Printer.PDF417Parameter) -> Self
    @objc public func actionPrintQRCode(_ parameter: StarIO10.StarXpandCommand.Printer.QRCodeParameter) -> Self
    @objc public func actionPrintImage(_ parameter: StarIO10.StarXpandCommand.Printer.PageModeImageParameter) -> Self
    @objc public func actionPrintRuledLine(_ parameter: StarIO10.StarXpandCommand.Printer.PageModeRuledLineParameter) -> Self
    @objc public func actionPrintRectangle(_ parameter: StarIO10.StarXpandCommand.Printer.PageModeRectangleParameter) -> Self
    @objc public func add(_ builder: StarIO10.StarXpandCommand.PageModeBuilder) -> Self
    @objc public func addPageMode(parameter: StarIO10.StarXpandCommand.Printer.PageModeAreaParameter, builder: StarIO10.StarXpandCommand.PageModeBuilder) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandPrinterBuilder) public class PrinterBuilder : ObjectiveC.NSObject {
    @objc public func styleAlignment(_ position: StarIO10.StarXpandCommand.Printer.Alignment) -> Self
    @objc public func styleFont(_ type: StarIO10.StarXpandCommand.Printer.FontType) -> Self
    @objc public func styleBold(_ enable: Swift.Bool) -> Self
    @objc public func styleInvert(_ enable: Swift.Bool) -> Self
    @objc public func styleUnderLine(_ enable: Swift.Bool) -> Self
    @objc public func styleMagnification(_ parameter: StarIO10.StarXpandCommand.MagnificationParameter) -> Self
    @objc public func styleCharacterSpace(_ width: Swift.Double) -> Self
    @objc public func styleLineSpace(_ height: Swift.Double) -> Self
    @objc public func styleHorizontalPositionTo(_ position: Swift.Double) -> Self
    @objc public func styleHorizontalPositionBy(_ position: Swift.Double) -> Self
    @objc public func styleHorizontalTabPositions(_ position: [Swift.Int]) -> Self
    @objc public func styleInternationalCharacter(_ type: StarIO10.StarXpandCommand.Printer.InternationalCharacterType) -> Self
    @objc public func styleSecondPriorityCharacterEncoding(_ type: StarIO10.StarXpandCommand.Printer.CharacterEncodingType) -> Self
    public func styleCJKCharacterPriority(_ types: [StarIO10.StarXpandCommand.Printer.CJKCharacterType]) -> Self
    @available(swift, obsoleted: 0.1)
    @objc(styleCJKCharacterPriority:) public func styleCJKCharacterPriority(_ types: [Swift.Int]) -> Self
    @objc public func actionCut(_ type: StarIO10.StarXpandCommand.Printer.CutType) -> Self
    @objc public func actionFeed(_ height: Swift.Double) -> Self
    @objc public func actionFeedLine(_ lines: Swift.Int) -> Self
    @objc public func actionPrintText(_ content: Swift.String) -> Self
    @objc public func actionPrintLogo(_ parameter: StarIO10.StarXpandCommand.Printer.LogoParameter) -> Self
    @objc public func actionPrintBarcode(_ parameter: StarIO10.StarXpandCommand.Printer.BarcodeParameter) -> Self
    @objc public func actionPrintPDF417(_ parameter: StarIO10.StarXpandCommand.Printer.PDF417Parameter) -> Self
    @objc public func actionPrintQRCode(_ parameter: StarIO10.StarXpandCommand.Printer.QRCodeParameter) -> Self
    @objc public func actionPrintImage(_ parameter: StarIO10.StarXpandCommand.Printer.ImageParameter) -> Self
    @objc public func actionPrintRuledLine(_ parameter: StarIO10.StarXpandCommand.Printer.RuledLineParameter) -> Self
    @objc public func add(_ builder: StarIO10.StarXpandCommand.PrinterBuilder) -> Self
    @objc public func addPageMode(parameter: StarIO10.StarXpandCommand.Printer.PageModeAreaParameter, builder: StarIO10.StarXpandCommand.PageModeBuilder) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Buzzer {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandBuzzerDriveParameter) public class DriveParameter : ObjectiveC.NSObject {
    @objc public var channel: StarIO10.StarXpandCommand.Buzzer.Channel {
      @objc get
    }
    @objc public func setChannel(_ channel: StarIO10.StarXpandCommand.Buzzer.Channel) -> Self
    @objc public var `repeat`: Swift.Int {
      @objc get
    }
    @objc public func setRepeat(_ repeat: Swift.Int) -> Self
    @objc public var onTime: Swift.Int {
      @objc get
    }
    @objc public func setOnTime(_ onTime: Swift.Int) -> Self
    @objc public var offTime: Swift.Int {
      @objc get
    }
    @objc public func setOffTime(_ offTime: Swift.Int) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterInternationalCharacterType) public enum InternationalCharacterType : Swift.Int {
    case usa
    case france
    case germany
    case uk
    case denmark
    case sweden
    case italy
    case spain
    case japan
    case norway
    case denmark2
    case spain2
    case latinAmerica
    case korea
    case ireland
    case slovenia
    case croatia
    case china
    case vietnam
    case arabic
    case legal
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10StarDeviceDiscoveryManagerDelegate) public protocol StarDeviceDiscoveryManagerDelegate {
  @objc(manager:didFindPrinter:) func manager(_ manager: StarIO10.StarDeviceDiscoveryManager, didFind printer: StarIO10.StarPrinter)
  @objc func managerDidFinishDiscovery(_ manager: StarIO10.StarDeviceDiscoveryManager)
}
extension StarIO10.StarPrinter {
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use open() async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func open(completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use close() async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func close(completion: @escaping () -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use print(raw:) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func print(raw: Foundation.Data, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use print(command:) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func print(command: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
  @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use print(command:StarSpoolJobSettings) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  public func print(command: Swift.String, starSpoolJobSettings: StarIO10.StarSpoolJobSettings, completion: @escaping (Swift.Int?, Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use getStatus() async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func getStatus(completion: @escaping (StarIO10.StarPrinterStatus?, Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use getSpoolJobStatus(jobID:) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func getSpoolJobStatus(jobId: Swift.Int, completion: @escaping (StarIO10.StarSpoolJobStatus?, Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use getSpoolJobStatus(jobID:) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func getSpoolJobStatusList(size: Swift.Int, completion: @escaping ([StarIO10.StarSpoolJobStatus]?, Swift.Error?) -> Swift.Void)
  @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use setStarConfiguration(starConfiguration:) async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  public func setStarConfiguration(starConfiguration: Swift.String, completion: @escaping (StarIO10.StarConfigurationSetResult?, Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use getStarConfiguration() async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func getStarConfiguration(password: Swift.String? = nil, completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc @available(iOS, deprecated: 12.0, obsoleted: 13.0, message: "Not available on iOS 13 or later: Please use getDefaultStarConfiguration() async. This method is provided only for compatibility of applications supporting iOS 12 and will be removed in the future.")
  dynamic public func getDefaultStarConfiguration(completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterBarcodeSymbology) public enum BarcodeSymbology : Swift.Int {
    case upcE
    case upcA
    case jan8
    case ean8
    case jan13
    case ean13
    case code39
    case itf
    case code128
    case code93
    case nw7
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10ErrorCode) public enum StarIO10ErrorCode : Swift.Int, Swift.CaseIterable {
  @objc(STARIO10ErrorCodeNone) case none = 0
  @objc(STARIO10ErrorCodeDeviceHasError) case deviceHasError = 1000
  @objc(STARIO10ErrorCodePrinterHoldingPaper) case printerHoldingPaper = 1001
  @objc(STARIO10ErrorCodePrintingTimeout) case printingTimeout = 1002
  @objc(STARIO10ErrorCodeBluetoothUnavailable) case bluetoothUnavailable = 2000
  @objc(STARIO10ErrorCodeNetworkUnavailable) case networkUnavailable = 2001
  @objc(STARIO10ErrorCodeSpoolerIsDisabled) case spoolerIsDisabled = 3000
  @objc(STARIO10ErrorCodeSpoolerBufferIsNotEnough) case spoolerBufferIsNotEnough = 3001
  @objc(STARIO10ErrorCodeSpoolerJobIdNotExists) case spoolerJobIdNotExists = 3002
  @objc(STARIO10ErrorCodeInvalidPassword) case invalidPassword = 4000
  @objc(STARIO10ErrorCodeNeedToChangePassword) case needToChangePassword = 4001
  @objc(STARIO10ErrorCodeJsonFormatError) case jsonFormatError = 5000
  @objc(STARIO10ErrorCodeStarConfigurationFormatError) case starConfigurationFormatError = 6000
  @objc(STARIO10ErrorCodeStarConfigurationParameterError) case starConfigurationParameterError = 6001
  @objc(STARIO10ErrorCodeStarConfigurationSpecifiedFileError) case starConfigurationSpecifiedFileError = 6002
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [StarIO10.StarIO10ErrorCode]
  public typealias RawValue = Swift.Int
  public static var allCases: [StarIO10.StarIO10ErrorCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarIO10ErrorCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objcMembers @objc(STARIO10StarConnectionSettings) public class StarConnectionSettings : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public static let FIRST_FOUND_DEVICE: Swift.String
  @objc public var interfaceType: StarIO10.InterfaceType
  @objc public var identifier: Swift.String
  @objc public var autoSwitchInterface: Swift.Bool
  @objc public init(interfaceType: StarIO10.InterfaceType, identifier: Swift.String = FIRST_FOUND_DEVICE, autoSwitchInterface: Swift.Bool = false)
  @objc deinit
}
extension StarIO10.StarXpandCommand.MelodySpeaker {
  @objc(STARIO10StarXpandCommandMelodySpeakerSoundStorageArea) public enum SoundStorageArea : Swift.Int {
    case area1
    case area2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterBarcodeBarRatioLevel) public enum BarcodeBarRatioLevel : Swift.Int {
    case levelPlus1
    case level0
    case levelMinus1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(STARIO10StarConfigurationSetResult) public enum StarConfigurationSetResult : Swift.Int, Swift.CustomStringConvertible {
  case applied
  case accepted
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterRuledLineParameter) public class RuledLineParameter : ObjectiveC.NSObject {
    @objc final public let width: Swift.Double
    @objc public var x: Swift.Double {
      @objc get
    }
    @objc public func setX(_ x: Swift.Double) -> Self
    @objc public var thickness: Swift.Double {
      @objc get
    }
    @objc public func setThickness(_ thickness: Swift.Double) -> Self
    @objc public var lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle {
      @objc get
    }
    @objc public func setLineStyle(_ lineStyle: StarIO10.StarXpandCommand.Printer.LineStyle) -> Self
    @objc public init(width: Swift.Double)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandDocumentBuilder) public class DocumentBuilder : ObjectiveC.NSObject {
    @objc public func settingTopMargin(_ height: Swift.Double) -> Self
    @objc public func settingBlackMark(_ parameter: StarIO10.StarXpandCommand.Printer.BlackMarkParameter) -> Self
    @objc public func settingLabel(_ parameter: StarIO10.StarXpandCommand.Printer.LabelParameter) -> Self
    @objc public func settingHoldPrint(_ parameter: StarIO10.StarXpandCommand.Printer.HoldPrintParameter) -> Self
    @objc public func settingPrintableArea(_ width: Swift.Double) -> Self
    @objc public func addPrinter(_ builder: StarIO10.StarXpandCommand.PrinterBuilder) -> Self
    @objc public func addDrawer(_ builder: StarIO10.StarXpandCommand.DrawerBuilder) -> Self
    @objc public func addBuzzer(_ builder: StarIO10.StarXpandCommand.BuzzerBuilder) -> Self
    @objc public func addMelodySpeaker(_ builder: StarIO10.StarXpandCommand.MelodySpeakerBuilder) -> Self
    @objc public func addDisplay(_ builder: StarIO10.StarXpandCommand.DisplayBuilder) -> Self
    @objc public func addRaw(_ content: Foundation.Data) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
@objcMembers @objc(STARIO10StarSpoolJobSettings) public class StarSpoolJobSettings : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var isRetryEnabled: Swift.Bool {
    get
  }
  @objc public var timeout: Swift.Int {
    get
  }
  @objc public var note: Swift.String {
    get
  }
  @objc public init(isRetryEnabled: Swift.Bool, timeout: Swift.Int, note: Swift.String = "")
  @objc deinit
}
extension StarIO10.StarXpandCommand.Printer {
  @objcMembers @objc(STARIO10StarXpandCommandPrinterHoldPrintParameter) public class HoldPrintParameter : ObjectiveC.NSObject {
    @objc final public let enable: Swift.Bool
    @objc public init(enable: Swift.Bool)
    @objc deinit
  }
}
@objc(STARIO10InterfaceType) public enum InterfaceType : Swift.Int, Swift.CustomStringConvertible {
  @objc(STARIO10InterfaceTypeUnknown) case unknown
  @objc(STARIO10InterfaceTypeUSB) case usb
  @objc(STARIO10InterfaceTypeBluetooth) case bluetooth
  @objc(STARIO10InterfaceTypeBluetoothLE) case bluetoothLE
  @objc(STARIO10InterfaceTypeLAN) case lan
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandBuzzerBuilder) public class BuzzerBuilder : ObjectiveC.NSObject {
    @objc public func actionDrive(_ parameter: StarIO10.StarXpandCommand.Buzzer.DriveParameter) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterCutType) public enum CutType : Swift.Int {
    case full
    case partial
    case fullDirect
    case partialDirect
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand.Printer {
  @objc(STARIO10StarXpandCommandPrinterCJKCharacterType) public enum CJKCharacterType : Swift.Int {
    case japanese
    case simplifiedChinese
    case traditionalChinese
    case korean
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarPrinterEmulation : Swift.Equatable {}
extension StarIO10.StarPrinterEmulation : Swift.Hashable {}
extension StarIO10.StarPrinterEmulation : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Display.CursorState : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Display.CursorState : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Display.CursorState : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.LineStyle : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.LineStyle : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.LineStyle : Swift.RawRepresentable {}
extension StarIO10.SpoolJobState : Swift.Equatable {}
extension StarIO10.SpoolJobState : Swift.Hashable {}
extension StarIO10.SpoolJobState : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Display.Contrast : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Display.Contrast : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Display.Contrast : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Drawer.Channel : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Drawer.Channel : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Drawer.Channel : Swift.RawRepresentable {}
extension StarIO10.DrawerOpenedMethod : Swift.Equatable {}
extension StarIO10.DrawerOpenedMethod : Swift.Hashable {}
extension StarIO10.DrawerOpenedMethod : Swift.RawRepresentable {}
extension StarIO10.SpoolJobReceivedInterface : Swift.Equatable {}
extension StarIO10.SpoolJobReceivedInterface : Swift.Hashable {}
extension StarIO10.SpoolJobReceivedInterface : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Buzzer.Channel : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Buzzer.Channel : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Buzzer.Channel : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.PageModePrintDirection : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.PageModePrintDirection : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.PageModePrintDirection : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Display.CharacterEncodingType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Display.CharacterEncodingType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Display.CharacterEncodingType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.FontType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.FontType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.FontType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.Alignment : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.Alignment : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.Alignment : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeLevel : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeLevel : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeLevel : Swift.RawRepresentable {}
extension StarIO10.StarPrinterModel : Swift.Equatable {}
extension StarIO10.StarPrinterModel : Swift.Hashable {}
extension StarIO10.StarPrinterModel : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.CharacterEncodingType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.CharacterEncodingType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.CharacterEncodingType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.BlackMarkPosition : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.BlackMarkPosition : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.BlackMarkPosition : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.PDF417Level : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.PDF417Level : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.PDF417Level : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Display.InternationalCharacterType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Display.InternationalCharacterType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Display.InternationalCharacterType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeModel : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeModel : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.QRCodeModel : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.InternationalCharacterType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.InternationalCharacterType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.InternationalCharacterType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeSymbology : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeSymbology : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeSymbology : Swift.RawRepresentable {}
extension StarIO10.StarIO10ErrorCode : Swift.Equatable {}
extension StarIO10.StarIO10ErrorCode : Swift.Hashable {}
extension StarIO10.StarIO10ErrorCode : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.MelodySpeaker.SoundStorageArea : Swift.Equatable {}
extension StarIO10.StarXpandCommand.MelodySpeaker.SoundStorageArea : Swift.Hashable {}
extension StarIO10.StarXpandCommand.MelodySpeaker.SoundStorageArea : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeBarRatioLevel : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeBarRatioLevel : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.BarcodeBarRatioLevel : Swift.RawRepresentable {}
extension StarIO10.StarConfigurationSetResult : Swift.Equatable {}
extension StarIO10.StarConfigurationSetResult : Swift.Hashable {}
extension StarIO10.StarConfigurationSetResult : Swift.RawRepresentable {}
extension StarIO10.InterfaceType : Swift.Equatable {}
extension StarIO10.InterfaceType : Swift.Hashable {}
extension StarIO10.InterfaceType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.CutType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.CutType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.CutType : Swift.RawRepresentable {}
extension StarIO10.StarXpandCommand.Printer.CJKCharacterType : Swift.Equatable {}
extension StarIO10.StarXpandCommand.Printer.CJKCharacterType : Swift.Hashable {}
extension StarIO10.StarXpandCommand.Printer.CJKCharacterType : Swift.RawRepresentable {}
